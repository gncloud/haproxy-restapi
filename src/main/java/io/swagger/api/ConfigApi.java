///**
// * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
// * https://github.com/swagger-api/swagger-codegen
// * Do not edit the class manually.
// */
//package io.swagger.api;
//
//import io.swagger.ConfigInvalidException;
//import io.swagger.annotations.*;
//import io.swagger.model.*;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//import javax.validation.Valid;
//@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-30T06:16:08.273Z")
//
//@Api(value = "config", description = "the config API")
//public interface ConfigApi {
//
//    @ApiOperation(value = "Get haproxy config.", notes = "", response = Config.class, tags={  })
//    @ApiResponses(value = {
//    @ApiResponse(code = 200, message = "OK", response = Config.class) })
//    @RequestMapping(value = "/config",
//        produces = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Config> configGet();
//
//
//    @ApiOperation(value = "Overwrite haproxy config.", notes = "", response = Config.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Config.class) })
//
//    @RequestMapping(value = "/config",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Config> configPost(@ApiParam(value = "The config to write." ,required=true )  @Valid @RequestBody Config config);
//
//
//    @ApiOperation(value = "Update haproxy config", notes = "", response = Config.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Config.class) })
//
//    @RequestMapping(value = "/config",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Config> configPut(@ApiParam(value = "The config to update." ,required=true )  @Valid @RequestBody Config config);
//
//
//    @ApiOperation(value = "Delete acl config.", notes = "", response = Void.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Void.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}/acls/{aclId}",
//        produces = { "application/json" },
//        method = RequestMethod.DELETE)
//    ResponseEntity<Void> deleteAcl(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId,@ApiParam(value = "ID of acl to return",required=true ) @PathVariable("aclId") String aclId);
//
//
//    @ApiOperation(value = "Delete backend config.", notes = "", response = Void.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Void.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}",
//        produces = { "application/json" },
//        method = RequestMethod.DELETE)
//    ResponseEntity<Void> deleteBackend(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId);
//
//
//    @ApiOperation(value = "Delete frontend config.", notes = "", response = Void.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Void.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}",
//        produces = { "application/json" },
//        method = RequestMethod.DELETE)
//    ResponseEntity<Void> deleteFrontend(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId);
//
//
//    @ApiOperation(value = "Delete server config.", notes = "", response = Void.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Void.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}/servers/{serverId}",
//        produces = { "application/json" },
//        method = RequestMethod.DELETE)
//    ResponseEntity<Void> deleteServer(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId,@ApiParam(value = "ID of server",required=true ) @PathVariable("serverId") String serverId);
//
//
//    @ApiOperation(value = "Get acl config.", notes = "", response = ACL.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = ACL.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}/acls/{aclId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<ACL> getAcl(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId,@ApiParam(value = "ID of acl to return",required=true ) @PathVariable("aclId") String aclId);
//
//
//    @ApiOperation(value = "Get acl config list.", notes = "", response = ACLs.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = ACLs.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}/acls",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<ACLs> getAcls(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId);
//
//
//    @ApiOperation(value = "Get backend config.", notes = "", response = Backend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Backend.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Backend> getBackend(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId);
//
//
//    @ApiOperation(value = "Get backend config list.", notes = "", response = Backends.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Backends.class) })
//
//    @RequestMapping(value = "/config/backends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Backends> getBackends();
//
//
//    @ApiOperation(value = "Get defaults config.", notes = "", response = Defaults.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Defaults.class) })
//
//    @RequestMapping(value = "/config/defaults",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Defaults> getDefaults();
//
//
//    @ApiOperation(value = "Get frontend config.", notes = "", response = Frontend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Frontend.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Frontend> getFrontend(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId);
//
//
//    @ApiOperation(value = "Get frontend config list.", notes = "", response = Frontends.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Frontends.class) })
//
//    @RequestMapping(value = "/config/frontends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Frontends> getFrontends();
//
//
//    @ApiOperation(value = "Get global config.", notes = "", response = Global.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Global.class) })
//
//    @RequestMapping(value = "/config/global",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Global> getGlobal();
//
//
//    @ApiOperation(value = "Get server config.", notes = "", response = Server.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Server.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}/servers/{serverId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Server> getServer(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId,@ApiParam(value = "ID of server",required=true ) @PathVariable("serverId") String serverId);
//
//
//    @ApiOperation(value = "Get server config list.", notes = "", response = Servers.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Servers.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}/servers",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<Servers> getServers(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId);
//
//
//    @ApiOperation(value = "Add acl config.", notes = "", response = ACL.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = ACL.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}/acls",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<ACL> newAcl(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId,@ApiParam(value = "The acl to update." ,required=true )  @Valid @RequestBody ACL body);
//
//
//    @ApiOperation(value = "Add new backend.", notes = "", response = Backend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Backend.class) })
//
//    @RequestMapping(value = "/config/backends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Backend> newBackend(@ApiParam(value = "The backend to create." ,required=true )  @Valid @RequestBody Backend backend);
//
//
//    @ApiOperation(value = "Add new frontend.", notes = "", response = Frontend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Frontend.class) })
//
//    @RequestMapping(value = "/config/frontends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Frontend> newFrontend(@ApiParam(value = "The frontend to create." ,required=true )  @Valid @RequestBody Frontend frontend) throws ConfigInvalidException;
//
//
//    @ApiOperation(value = "Add server config.", notes = "", response = Server.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Server.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}/servers",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Server> newServer(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId,@ApiParam(value = "The server to add." ,required=true )  @Valid @RequestBody Server body);
//
//
//    @ApiOperation(value = "Set defaults config.", notes = "", response = Defaults.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Defaults.class) })
//
//    @RequestMapping(value = "/config/defaults",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Defaults> setDefaults(@ApiParam(value = "The defaults to set." ,required=true )  @Valid @RequestBody Defaults defaults);
//
//
//    @ApiOperation(value = "Set global config.", notes = "", response = Global.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Global.class) })
//
//    @RequestMapping(value = "/config/global",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Global> setGlobal(@ApiParam(value = "The global to set." ,required=false )  @Valid @RequestBody Global global);
//
//
//    @ApiOperation(value = "Update acl config.", notes = "", response = ACL.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = ACL.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}/acls/{aclId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<ACL> updateAcl(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId,@ApiParam(value = "ID of acl to return",required=true ) @PathVariable("aclId") String aclId,@ApiParam(value = "The acl to update." ,required=true )  @Valid @RequestBody ACL body) ;
//
//
//    @ApiOperation(value = "Update backend config.", notes = "", response = Backend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Backend.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Backend> updateBackend(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId,@ApiParam(value = "The backend to update." ,required=true )  @Valid @RequestBody Backend body);
//
//
//    @ApiOperation(value = "Update backends config.", notes = "", response = Backends.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Backends.class) })
//
//    @RequestMapping(value = "/config/backends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Backends> updateBackends(@ApiParam(value = "The backends to update." ,required=true )  @Valid @RequestBody Backends body);
//
//
//    @ApiOperation(value = "Update defaults config.", notes = "", response = Defaults.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Defaults.class) })
//
//    @RequestMapping(value = "/config/defaults",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Defaults> updateDefaults(@ApiParam(value = "The defaults to update." ,required=true )  @Valid @RequestBody Defaults defaults);
//
//
//    @ApiOperation(value = "Update frontend config.", notes = "", response = Frontend.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Frontend.class) })
//
//    @RequestMapping(value = "/config/frontends/{frontendId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Frontend> updateFrontend(@ApiParam(value = "ID of frontend to return",required=true ) @PathVariable("frontendId") String frontendId,@ApiParam(value = "The frontend to update." ,required=true )  @Valid @RequestBody Frontend body);
//
//
//    @ApiOperation(value = "Update frontends config.", notes = "", response = Frontends.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Frontends.class) })
//
//    @RequestMapping(value = "/config/frontends",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Frontends> updateFrontends(@ApiParam(value = "The frontends to update." ,required=true )  @Valid @RequestBody Frontends body);
//
//
//    @ApiOperation(value = "Update global config.", notes = "", response = Global.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Global.class) })
//
//    @RequestMapping(value = "/config/global",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Global> updateGlobal(@ApiParam(value = "The global to update." ,required=true )  @Valid @RequestBody Global global);
//
//
//    @ApiOperation(value = "Update server config.", notes = "", response = Server.class, tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "OK", response = Server.class) })
//
//    @RequestMapping(value = "/config/backends/{backendId}/servers/{serverId}",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.PUT)
//    ResponseEntity<Server> updateServer(@ApiParam(value = "ID of backend",required=true ) @PathVariable("backendId") String backendId,@ApiParam(value = "ID of server",required=true ) @PathVariable("serverId") String serverId,@ApiParam(value = "The backend to update." ,required=true )  @Valid @RequestBody Server body);
//
//}
